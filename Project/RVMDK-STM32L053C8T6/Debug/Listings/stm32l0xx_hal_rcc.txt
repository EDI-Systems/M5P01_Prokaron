; generated by Component: ARM Compiler 5.06 update 2 (build 183) Tool: ArmCC [4d35cd]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\debug\output\stm32l0xx_hal_rcc.o --asm_dir=.\Debug\Listings\ --list_dir=.\Debug\Listings\ --depend=.\debug\output\stm32l0xx_hal_rcc.d --cpu=Cortex-M0+ --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\..\MProkaron\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\CMSIS\Include -I..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Inc\Conf -IF:\Code_Library\MCU\Mutatus\M5P1_MuProkaron\Project\RVMDK-STM32L053C8T6\RTE -ID:\Program_Files_x86\Keil_v5\ARM\PACK\ARM\CMSIS\5.1.1\CMSIS\Include -ID:\Program_Files_x86\Keil_v5\ARM\PACK\Keil\STM32L0xx_DFP\2.0.0\Drivers\CMSIS\Device\ST\STM32L0xx\Include -D__MICROLIB -D__UVISION_VERSION=520 -D_RTE_ -DSTM32L053xx -DSTM32L0xx -DUSE_HAL_DRIVER --enum_is_int --signed_chars --omf_browse=.\debug\output\stm32l0xx_hal_rcc.crf ..\..\..\M0P0_Library\STM32Cube_FW_L0_V1.10.0\Drivers\STM32L0xx_HAL_Driver\Src\stm32l0xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1410     */
;;;1411   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1412   {
;;;1413     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1414       the HAL_RCC_CSSCallback could be implemented in the user file
;;;1415       */ 
;;;1416   }
;;;1417   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;822      */
;;;823    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  b5f8              PUSH     {r3-r7,lr}
;;;824    {
000002  4605              MOV      r5,r0
;;;825      uint32_t tickstart = 0U;
;;;826      
;;;827      /* Check the parameters */
;;;828      assert_param(RCC_ClkInitStruct != NULL);
;;;829      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;830      assert_param(IS_FLASH_LATENCY(FLatency));
;;;831    
;;;832      /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
;;;833      must be correctly programmed according to the frequency of the CPU clock 
;;;834      (HCLK) and the supply voltage of the device. */
;;;835    
;;;836      /* Increasing the number of wait states because of higher CPU frequency */
;;;837      if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
000004  4877              LDR      r0,|L2.484|
000006  460f              MOV      r7,r1                 ;824
000008  6800              LDR      r0,[r0,#0]
00000a  07c0              LSLS     r0,r0,#31
00000c  0fc0              LSRS     r0,r0,#31
00000e  42b8              CMP      r0,r7
000010  d20a              BCS      |L2.40|
;;;838      {    
;;;839        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;840        __HAL_FLASH_SET_LATENCY(FLatency);
000012  4874              LDR      r0,|L2.484|
000014  6801              LDR      r1,[r0,#0]
000016  0849              LSRS     r1,r1,#1
000018  0049              LSLS     r1,r1,#1
00001a  4339              ORRS     r1,r1,r7
00001c  6001              STR      r1,[r0,#0]
;;;841        
;;;842        /* Check that the new number of wait states is taken into account to access the Flash
;;;843        memory by reading the FLASH_ACR register */
;;;844        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
00001e  6800              LDR      r0,[r0,#0]
000020  07c0              LSLS     r0,r0,#31
000022  0fc0              LSRS     r0,r0,#31
000024  42b8              CMP      r0,r7
000026  d16e              BNE      |L2.262|
                  |L2.40|
;;;845        {
;;;846          return HAL_ERROR;
;;;847        }
;;;848      }
;;;849    
;;;850      /*-------------------------- HCLK Configuration --------------------------*/
;;;851      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
000028  7828              LDRB     r0,[r5,#0]
;;;852      {
;;;853        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;854        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
00002a  4c6f              LDR      r4,|L2.488|
00002c  0780              LSLS     r0,r0,#30             ;851
00002e  d505              BPL      |L2.60|
000030  68e0              LDR      r0,[r4,#0xc]
000032  21f0              MOVS     r1,#0xf0
000034  4388              BICS     r0,r0,r1
000036  68a9              LDR      r1,[r5,#8]
000038  4308              ORRS     r0,r0,r1
00003a  60e0              STR      r0,[r4,#0xc]
                  |L2.60|
;;;855      }
;;;856    
;;;857      /*------------------------- SYSCLK Configuration ---------------------------*/ 
;;;858      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
00003c  7828              LDRB     r0,[r5,#0]
00003e  07c0              LSLS     r0,r0,#31
000040  d066              BEQ      |L2.272|
;;;859      {    
;;;860        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;861        
;;;862        /* HSE is selected as System Clock Source */
;;;863        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
000042  6868              LDR      r0,[r5,#4]
000044  2802              CMP      r0,#2
000046  d021              BEQ      |L2.140|
;;;864        {
;;;865          /* Check the HSE ready flag */  
;;;866          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;867          {
;;;868            return HAL_ERROR;
;;;869          }
;;;870        }
;;;871        /* PLL is selected as System Clock Source */
;;;872        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
000048  2803              CMP      r0,#3
00004a  d023              BEQ      |L2.148|
;;;873        {
;;;874          /* Check the PLL ready flag */  
;;;875          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;876          {
;;;877            return HAL_ERROR;
;;;878          }
;;;879        }
;;;880        /* HSI is selected as System Clock Source */
;;;881        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
;;;882        {
;;;883          /* Check the HSI ready flag */  
;;;884          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;885          {
;;;886            return HAL_ERROR;
;;;887          }
;;;888        }
;;;889        /* MSI is selected as System Clock Source */
;;;890        else
;;;891        {
;;;892          /* Check the MSI ready flag */  
;;;893          if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
00004c  6821              LDR      r1,[r4,#0]
00004e  2801              CMP      r0,#1                 ;881
000050  d024              BEQ      |L2.156|
000052  0589              LSLS     r1,r1,#22
000054  d56c              BPL      |L2.304|
                  |L2.86|
;;;894          {
;;;895            return HAL_ERROR;
;;;896          }
;;;897        }
;;;898        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
000056  68e1              LDR      r1,[r4,#0xc]
000058  0889              LSRS     r1,r1,#2
00005a  0089              LSLS     r1,r1,#2
00005c  4301              ORRS     r1,r1,r0
00005e  60e1              STR      r1,[r4,#0xc]
;;;899    
;;;900        /* Get Start Tick */
;;;901        tickstart = HAL_GetTick();
000060  f7fffffe          BL       HAL_GetTick
;;;902        
;;;903        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
000064  6869              LDR      r1,[r5,#4]
000066  4606              MOV      r6,r0                 ;901
000068  2902              CMP      r1,#2
00006a  d01a              BEQ      |L2.162|
;;;904        {
;;;905          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
;;;906          {
;;;907            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;908            {
;;;909              return HAL_TIMEOUT;
;;;910            }
;;;911          }
;;;912        }
;;;913        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
00006c  2903              CMP      r1,#3
00006e  d029              BEQ      |L2.196|
;;;914        {
;;;915          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;916          {
;;;917            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;918            {
;;;919              return HAL_TIMEOUT;
;;;920            }
;;;921          }
;;;922        }
;;;923        else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
000070  2901              CMP      r1,#1
;;;924        {
;;;925          while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
;;;926          {
;;;927            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;928            {
;;;929              return HAL_TIMEOUT;
;;;930            }
;;;931          }
;;;932        }      
;;;933        else
;;;934        {
;;;935          while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
000072  68e1              LDR      r1,[r4,#0xc]
000074  d037              BEQ      |L2.230|
000076  0709              LSLS     r1,r1,#28
000078  0f89              LSRS     r1,r1,#30
00007a  d049              BEQ      |L2.272|
                  |L2.124|
;;;936          {
;;;937            if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
00007c  f7fffffe          BL       HAL_GetTick
000080  1b81              SUBS     r1,r0,r6
000082  485a              LDR      r0,|L2.492|
000084  4281              CMP      r1,r0
000086  d93f              BLS      |L2.264|
                  |L2.136|
;;;938            {
;;;939              return HAL_TIMEOUT;
000088  2003              MOVS     r0,#3
;;;940            }
;;;941          }
;;;942        }
;;;943      }    
;;;944      /* Decreasing the number of wait states because of lower CPU frequency */
;;;945      if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
;;;946      {    
;;;947        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;948        __HAL_FLASH_SET_LATENCY(FLatency);
;;;949        
;;;950        /* Check that the new number of wait states is taken into account to access the Flash
;;;951        memory by reading the FLASH_ACR register */
;;;952        if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
;;;953        {
;;;954          return HAL_ERROR;
;;;955        }
;;;956      }    
;;;957    
;;;958      /*-------------------------- PCLK1 Configuration ---------------------------*/ 
;;;959      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;960      {
;;;961        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;962        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;963      }
;;;964      
;;;965      /*-------------------------- PCLK2 Configuration ---------------------------*/ 
;;;966      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;967      {
;;;968        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;969        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
;;;970      }
;;;971     
;;;972      /* Update the SystemCoreClock global variable */
;;;973      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
;;;974    
;;;975      /* Configure the source of time base considering new system clocks settings*/
;;;976      HAL_InitTick (TICK_INT_PRIORITY);
;;;977      
;;;978      return HAL_OK;
;;;979    }
00008a  bdf8              POP      {r3-r7,pc}
                  |L2.140|
00008c  6821              LDR      r1,[r4,#0]            ;866
00008e  0389              LSLS     r1,r1,#14             ;866
000090  d54e              BPL      |L2.304|
000092  e7e0              B        |L2.86|
                  |L2.148|
000094  6821              LDR      r1,[r4,#0]            ;875
000096  0189              LSLS     r1,r1,#6              ;875
000098  d54a              BPL      |L2.304|
00009a  e7dc              B        |L2.86|
                  |L2.156|
00009c  0749              LSLS     r1,r1,#29             ;884
00009e  d547              BPL      |L2.304|
0000a0  e7d9              B        |L2.86|
                  |L2.162|
0000a2  68e1              LDR      r1,[r4,#0xc]          ;905
0000a4  0709              LSLS     r1,r1,#28             ;905
0000a6  0f89              LSRS     r1,r1,#30             ;905
0000a8  2902              CMP      r1,#2                 ;905
0000aa  d031              BEQ      |L2.272|
                  |L2.172|
0000ac  f7fffffe          BL       HAL_GetTick
0000b0  1b81              SUBS     r1,r0,r6              ;907
0000b2  484e              LDR      r0,|L2.492|
0000b4  4281              CMP      r1,r0                 ;907
0000b6  d8e7              BHI      |L2.136|
0000b8  68e0              LDR      r0,[r4,#0xc]          ;905
0000ba  0700              LSLS     r0,r0,#28             ;905
0000bc  0f80              LSRS     r0,r0,#30             ;905
0000be  2802              CMP      r0,#2                 ;905
0000c0  d1f4              BNE      |L2.172|
0000c2  e025              B        |L2.272|
                  |L2.196|
0000c4  68e1              LDR      r1,[r4,#0xc]          ;915
0000c6  0709              LSLS     r1,r1,#28             ;915
0000c8  0f89              LSRS     r1,r1,#30             ;915
0000ca  2903              CMP      r1,#3                 ;915
0000cc  d020              BEQ      |L2.272|
                  |L2.206|
0000ce  f7fffffe          BL       HAL_GetTick
0000d2  1b81              SUBS     r1,r0,r6              ;917
0000d4  4845              LDR      r0,|L2.492|
0000d6  4281              CMP      r1,r0                 ;917
0000d8  d8d6              BHI      |L2.136|
0000da  68e0              LDR      r0,[r4,#0xc]          ;915
0000dc  0700              LSLS     r0,r0,#28             ;915
0000de  0f80              LSRS     r0,r0,#30             ;915
0000e0  2803              CMP      r0,#3                 ;915
0000e2  d1f4              BNE      |L2.206|
0000e4  e014              B        |L2.272|
                  |L2.230|
0000e6  0709              LSLS     r1,r1,#28             ;925
0000e8  0f89              LSRS     r1,r1,#30             ;925
0000ea  2901              CMP      r1,#1                 ;925
0000ec  d010              BEQ      |L2.272|
                  |L2.238|
0000ee  f7fffffe          BL       HAL_GetTick
0000f2  1b81              SUBS     r1,r0,r6              ;927
0000f4  483d              LDR      r0,|L2.492|
0000f6  4281              CMP      r1,r0                 ;927
0000f8  d8c6              BHI      |L2.136|
0000fa  68e0              LDR      r0,[r4,#0xc]          ;925
0000fc  0700              LSLS     r0,r0,#28             ;925
0000fe  0f80              LSRS     r0,r0,#30             ;925
000100  2801              CMP      r0,#1                 ;925
000102  d1f4              BNE      |L2.238|
000104  e004              B        |L2.272|
                  |L2.262|
000106  e013              B        |L2.304|
                  |L2.264|
000108  68e0              LDR      r0,[r4,#0xc]          ;935
00010a  0700              LSLS     r0,r0,#28             ;935
00010c  0f80              LSRS     r0,r0,#30             ;935
00010e  d1b5              BNE      |L2.124|
                  |L2.272|
000110  4834              LDR      r0,|L2.484|
000112  6801              LDR      r1,[r0,#0]            ;945
000114  07c9              LSLS     r1,r1,#31             ;945
000116  0fc9              LSRS     r1,r1,#31             ;945
000118  42b9              CMP      r1,r7                 ;945
00011a  d90b              BLS      |L2.308|
00011c  6801              LDR      r1,[r0,#0]            ;948
00011e  0849              LSRS     r1,r1,#1              ;948
000120  0049              LSLS     r1,r1,#1              ;948
000122  4339              ORRS     r1,r1,r7              ;948
000124  6001              STR      r1,[r0,#0]            ;948
000126  6800              LDR      r0,[r0,#0]            ;952
000128  07c0              LSLS     r0,r0,#31             ;952
00012a  0fc0              LSRS     r0,r0,#31             ;952
00012c  42b8              CMP      r0,r7                 ;952
00012e  d001              BEQ      |L2.308|
                  |L2.304|
000130  2001              MOVS     r0,#1                 ;954
000132  bdf8              POP      {r3-r7,pc}
                  |L2.308|
000134  7828              LDRB     r0,[r5,#0]            ;959
000136  0740              LSLS     r0,r0,#29             ;959
000138  d506              BPL      |L2.328|
00013a  68e0              LDR      r0,[r4,#0xc]          ;962
00013c  2107              MOVS     r1,#7                 ;962
00013e  0209              LSLS     r1,r1,#8              ;962
000140  4388              BICS     r0,r0,r1              ;962
000142  68e9              LDR      r1,[r5,#0xc]          ;962
000144  4308              ORRS     r0,r0,r1              ;962
000146  60e0              STR      r0,[r4,#0xc]          ;962
                  |L2.328|
000148  7828              LDRB     r0,[r5,#0]            ;966
00014a  0700              LSLS     r0,r0,#28             ;966
00014c  d507              BPL      |L2.350|
00014e  68e0              LDR      r0,[r4,#0xc]          ;969
000150  2107              MOVS     r1,#7                 ;969
000152  02c9              LSLS     r1,r1,#11             ;969
000154  4388              BICS     r0,r0,r1              ;969
000156  6929              LDR      r1,[r5,#0x10]         ;969
000158  00c9              LSLS     r1,r1,#3              ;969
00015a  4308              ORRS     r0,r0,r1              ;969
00015c  60e0              STR      r0,[r4,#0xc]          ;969
                  |L2.350|
00015e  68e1              LDR      r1,[r4,#0xc]          ;969
000160  220c              MOVS     r2,#0xc               ;969
000162  4608              MOV      r0,r1                 ;969
000164  4010              ANDS     r0,r0,r2              ;969
000166  2804              CMP      r0,#4                 ;969
000168  d017              BEQ      |L2.410|
00016a  2808              CMP      r0,#8                 ;969
00016c  d01c              BEQ      |L2.424|
00016e  280c              CMP      r0,#0xc               ;969
000170  d01c              BEQ      |L2.428|
000172  6860              LDR      r0,[r4,#4]            ;969
000174  0400              LSLS     r0,r0,#16             ;969
000176  0f41              LSRS     r1,r0,#29             ;969
000178  2001              MOVS     r0,#1                 ;969
00017a  03c0              LSLS     r0,r0,#15             ;969
00017c  1c49              ADDS     r1,r1,#1              ;969
00017e  4088              LSLS     r0,r0,r1              ;969
                  |L2.384|
000180  68e1              LDR      r1,[r4,#0xc]          ;973
000182  4a1b              LDR      r2,|L2.496|
000184  0609              LSLS     r1,r1,#24             ;973
000186  0f09              LSRS     r1,r1,#28             ;973
000188  5c51              LDRB     r1,[r2,r1]            ;973
00018a  40c8              LSRS     r0,r0,r1              ;973
00018c  4919              LDR      r1,|L2.500|
00018e  6008              STR      r0,[r1,#0]            ;976  ; SystemCoreClock
000190  2000              MOVS     r0,#0                 ;976
000192  f7fffffe          BL       HAL_InitTick
000196  2000              MOVS     r0,#0                 ;978
000198  bdf8              POP      {r3-r7,pc}
                  |L2.410|
00019a  6820              LDR      r0,[r4,#0]
00019c  06c0              LSLS     r0,r0,#27
00019e  d501              BPL      |L2.420|
0001a0  4815              LDR      r0,|L2.504|
0001a2  e7ed              B        |L2.384|
                  |L2.420|
0001a4  4815              LDR      r0,|L2.508|
0001a6  e7eb              B        |L2.384|
                  |L2.424|
0001a8  4815              LDR      r0,|L2.512|
0001aa  e7e9              B        |L2.384|
                  |L2.428|
0001ac  0288              LSLS     r0,r1,#10
0001ae  4a15              LDR      r2,|L2.516|
0001b0  0f00              LSRS     r0,r0,#28
0001b2  5c10              LDRB     r0,[r2,r0]
0001b4  0209              LSLS     r1,r1,#8
0001b6  68e2              LDR      r2,[r4,#0xc]
0001b8  0f89              LSRS     r1,r1,#30
0001ba  1c49              ADDS     r1,r1,#1
0001bc  03d2              LSLS     r2,r2,#15
0001be  d504              BPL      |L2.458|
0001c0  4a0f              LDR      r2,|L2.512|
0001c2  4350              MULS     r0,r2,r0
0001c4  f7fffffe          BL       __aeabi_uidivmod
0001c8  e7da              B        |L2.384|
                  |L2.458|
0001ca  6822              LDR      r2,[r4,#0]
0001cc  06d2              LSLS     r2,r2,#27
0001ce  d504              BPL      |L2.474|
0001d0  4a09              LDR      r2,|L2.504|
0001d2  4350              MULS     r0,r2,r0
0001d4  f7fffffe          BL       __aeabi_uidivmod
0001d8  e7d2              B        |L2.384|
                  |L2.474|
0001da  4a08              LDR      r2,|L2.508|
0001dc  4350              MULS     r0,r2,r0
0001de  f7fffffe          BL       __aeabi_uidivmod
0001e2  e7cd              B        |L2.384|
;;;980    
                          ENDP

                  |L2.484|
                          DCD      0x40022000
                  |L2.488|
                          DCD      0x40021000
                  |L2.492|
                          DCD      0x00001388
                  |L2.496|
                          DCD      AHBPrescTable
                  |L2.500|
                          DCD      SystemCoreClock
                  |L2.504|
                          DCD      0x003d0900
                  |L2.508|
                          DCD      0x00f42400
                  |L2.512|
                          DCD      0x007a1200
                  |L2.516|
                          DCD      PLLMulTable

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;270      */
;;;271    void HAL_RCC_DeInit(void)
000000  4816              LDR      r0,|L3.92|
;;;272    {
000002  b081              SUB      sp,sp,#4
;;;273      __IO uint32_t tmpreg;
;;;274    
;;;275      /* Set MSION bit */
;;;276      SET_BIT(RCC->CR, RCC_CR_MSION);
000004  6801              LDR      r1,[r0,#0]
000006  1582              ASRS     r2,r0,#22
000008  4311              ORRS     r1,r1,r2
00000a  6001              STR      r1,[r0,#0]
;;;277      
;;;278      /* Switch SYSCLK to MSI*/
;;;279      CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW);
00000c  68c1              LDR      r1,[r0,#0xc]
00000e  0889              LSRS     r1,r1,#2
000010  0089              LSLS     r1,r1,#2
000012  60c1              STR      r1,[r0,#0xc]
;;;280    
;;;281      /* Reset HSE, HSI, CSS, PLL */
;;;282    #if defined(RCC_CR_CSSHSEON) && defined(RCC_CR_HSIOUTEN)
;;;283      CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | RCC_CR_HSIOUTEN | \
;;;284                         RCC_CR_HSEON | RCC_CR_CSSHSEON | RCC_CR_PLLON); 
;;;285    #elif !defined(RCC_CR_CSSHSEON) && defined(RCC_CR_HSIOUTEN)
;;;286      CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | RCC_CR_HSIOUTEN | \
;;;287                         RCC_CR_HSEON | RCC_CR_PLLON);    
;;;288    #elif defined(RCC_CR_CSSHSEON) && !defined(RCC_CR_HSIOUTEN)
;;;289      CLEAR_BIT(RCC->CR, RCC_CR_HSION| RCC_CR_HSIKERON| RCC_CR_HSIDIVEN | \
000014  6801              LDR      r1,[r0,#0]
000016  4a12              LDR      r2,|L3.96|
000018  4011              ANDS     r1,r1,r2
00001a  6001              STR      r1,[r0,#0]
;;;290                         RCC_CR_HSEON | RCC_CR_CSSHSEON | RCC_CR_PLLON); 
;;;291    #endif
;;;292    
;;;293      /* Delay after an RCC peripheral clock */ \
;;;294      tmpreg = READ_BIT(RCC->CR, RCC_CR_HSEON);      \
00001c  6801              LDR      r1,[r0,#0]
00001e  2201              MOVS     r2,#1
000020  0412              LSLS     r2,r2,#16
000022  4011              ANDS     r1,r1,r2
;;;295      UNUSED(tmpreg); 
;;;296    
;;;297      /* Reset HSEBYP bit */
;;;298      CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
000024  9100              STR      r1,[sp,#0]
000026  6801              LDR      r1,[r0,#0]
000028  0092              LSLS     r2,r2,#2
00002a  4391              BICS     r1,r1,r2
00002c  6001              STR      r1,[r0,#0]
;;;299      
;;;300      /* Reset CFGR register */
;;;301      CLEAR_REG(RCC->CFGR);
00002e  2100              MOVS     r1,#0
000030  60c1              STR      r1,[r0,#0xc]
;;;302      
;;;303      /* Set MSIClockRange & MSITRIM[4:0] bits to the reset value */
;;;304      MODIFY_REG(RCC->ICSCR, (RCC_ICSCR_MSIRANGE | RCC_ICSCR_MSITRIM), (((uint32_t)0 << RCC_ICSCR_MSITRIM_BITNUMBER) | RCC_ICSCR_MSIRANGE_5));
000032  6842              LDR      r2,[r0,#4]
000034  4b0b              LDR      r3,|L3.100|
000036  401a              ANDS     r2,r2,r3
000038  2305              MOVS     r3,#5
00003a  035b              LSLS     r3,r3,#13
00003c  18d2              ADDS     r2,r2,r3
00003e  6042              STR      r2,[r0,#4]
;;;305      
;;;306      /* Set HSITRIM bits to the reset value */
;;;307      MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, ((uint32_t)0x10 << 8));
000040  6842              LDR      r2,[r0,#4]
000042  231f              MOVS     r3,#0x1f
000044  021b              LSLS     r3,r3,#8
000046  439a              BICS     r2,r2,r3
000048  1483              ASRS     r3,r0,#18
00004a  18d2              ADDS     r2,r2,r3
00004c  6042              STR      r2,[r0,#4]
;;;308      
;;;309      /* Disable all interrupts */
;;;310      CLEAR_REG(RCC->CIER); 
00004e  6101              STR      r1,[r0,#0x10]
;;;311    
;;;312      /* Update the SystemCoreClock global variable */
;;;313      SystemCoreClock = MSI_VALUE;
000050  4906              LDR      r1,|L3.108|
000052  4805              LDR      r0,|L3.104|
000054  6008              STR      r0,[r1,#0]  ; SystemCoreClock
;;;314    }
000056  b001              ADD      sp,sp,#4
000058  4770              BX       lr
;;;315    
                          ENDP

00005a  0000              DCW      0x0000
                  |L3.92|
                          DCD      0x40021000
                  |L3.96|
                          DCD      0xfef6fff4
                  |L3.100|
                          DCD      0x00ff1fff
                  |L3.104|
                          DCD      0x001fff68
                  |L3.108|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;1117     */
;;;1118   void HAL_RCC_EnableCSS(void)
000000  4803              LDR      r0,|L4.16|
;;;1119   {
;;;1120     SET_BIT(RCC->CR, RCC_CR_CSSON) ;
000002  6801              LDR      r1,[r0,#0]
000004  2201              MOVS     r2,#1
000006  04d2              LSLS     r2,r2,#19
000008  4311              ORRS     r1,r1,r2
00000a  6001              STR      r1,[r0,#0]
;;;1121   }
00000c  4770              BX       lr
;;;1122   
                          ENDP

00000e  0000              DCW      0x0000
                  |L4.16|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1362     */
;;;1363   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  b410              PUSH     {r4}
;;;1364   {
;;;1365     /* Check the parameters */
;;;1366     assert_param(RCC_ClkInitStruct != NULL);
;;;1367     assert_param(pFLatency != NULL);
;;;1368   
;;;1369     /* Set all possible values for the Clock type parameter --------------------*/
;;;1370     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  220f              MOVS     r2,#0xf
;;;1371     
;;;1372     /* Get the SYSCLK configuration --------------------------------------------*/ 
;;;1373     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  6002              STR      r2,[r0,#0]
000006  4a0c              LDR      r2,|L5.56|
000008  68d3              LDR      r3,[r2,#0xc]
00000a  079b              LSLS     r3,r3,#30
00000c  0f9b              LSRS     r3,r3,#30
;;;1374     
;;;1375     /* Get the HCLK configuration ----------------------------------------------*/ 
;;;1376     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
00000e  6043              STR      r3,[r0,#4]
000010  68d3              LDR      r3,[r2,#0xc]
000012  24f0              MOVS     r4,#0xf0
000014  4023              ANDS     r3,r3,r4
;;;1377     
;;;1378     /* Get the APB1 configuration ----------------------------------------------*/ 
;;;1379     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
000016  6083              STR      r3,[r0,#8]
000018  68d4              LDR      r4,[r2,#0xc]
00001a  2307              MOVS     r3,#7
00001c  021b              LSLS     r3,r3,#8
00001e  401c              ANDS     r4,r4,r3
;;;1380     
;;;1381     /* Get the APB2 configuration ----------------------------------------------*/ 
;;;1382     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
000020  60c4              STR      r4,[r0,#0xc]
000022  68d2              LDR      r2,[r2,#0xc]
;;;1383     
;;;1384     /* Get the Flash Wait State (Latency) configuration ------------------------*/   
;;;1385     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
;;;1386   }
000024  08d2              LSRS     r2,r2,#3
000026  401a              ANDS     r2,r2,r3
000028  6102              STR      r2,[r0,#0x10]         ;1385
00002a  4804              LDR      r0,|L5.60|
00002c  6800              LDR      r0,[r0,#0]            ;1385
00002e  07c0              LSLS     r0,r0,#31             ;1385
000030  0fc0              LSRS     r0,r0,#31             ;1385
000032  6008              STR      r0,[r1,#0]            ;1385
000034  bc10              POP      {r4}
000036  4770              BX       lr
;;;1387   
                          ENDP

                  |L5.56|
                          DCD      0x40021000
                  |L5.60|
                          DCD      0x40022000

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;1223     */
;;;1224   uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L6.8|
;;;1225   {
;;;1226     return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;1227   }
000004  4770              BX       lr
;;;1228   
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;1259     */
;;;1260   void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b470              PUSH     {r4-r6}
;;;1261   {
;;;1262     /* Check the parameters */
;;;1263     assert_param(RCC_OscInitStruct != NULL);
;;;1264   
;;;1265     /* Set all possible values for the Oscillator type parameter ---------------*/
;;;1266     RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
;;;1267                     | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_MSI;
;;;1268   #if defined(RCC_HSI48_SUPPORT)
;;;1269     RCC_OscInitStruct->OscillatorType |= RCC_OSCILLATORTYPE_HSI48;
000002  213f              MOVS     r1,#0x3f
;;;1270   #endif /* RCC_HSI48_SUPPORT */
;;;1271   
;;;1272   
;;;1273     /* Get the HSE configuration -----------------------------------------------*/
;;;1274     if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000004  6001              STR      r1,[r0,#0]
000006  492d              LDR      r1,|L7.188|
000008  680a              LDR      r2,[r1,#0]
;;;1275     {
;;;1276       RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
;;;1277     }
;;;1278     else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
;;;1279     {
;;;1280       RCC_OscInitStruct->HSEState = RCC_HSE_ON;
00000a  2401              MOVS     r4,#1
00000c  0353              LSLS     r3,r2,#13             ;1274
00000e  0424              LSLS     r4,r4,#16
000010  2200              MOVS     r2,#0
000012  2b00              CMP      r3,#0                 ;1274
000014  da03              BGE      |L7.30|
000016  2305              MOVS     r3,#5                 ;1276
000018  041b              LSLS     r3,r3,#16             ;1276
00001a  6043              STR      r3,[r0,#4]            ;1276
00001c  e005              B        |L7.42|
                  |L7.30|
00001e  680b              LDR      r3,[r1,#0]            ;1278
000020  03db              LSLS     r3,r3,#15             ;1278
000022  d501              BPL      |L7.40|
000024  6044              STR      r4,[r0,#4]
000026  e000              B        |L7.42|
                  |L7.40|
;;;1281     }
;;;1282     else
;;;1283     {
;;;1284       RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000028  6042              STR      r2,[r0,#4]
                  |L7.42|
;;;1285     }
;;;1286   
;;;1287     /* Get the HSI configuration -----------------------------------------------*/
;;;1288     if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
00002a  680b              LDR      r3,[r1,#0]
00002c  07dd              LSLS     r5,r3,#31
;;;1289     {
;;;1290       RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00002e  2301              MOVS     r3,#1
000030  2d00              CMP      r5,#0                 ;1288
000032  d001              BEQ      |L7.56|
000034  60c3              STR      r3,[r0,#0xc]
000036  e000              B        |L7.58|
                  |L7.56|
;;;1291     }
;;;1292     else
;;;1293     {
;;;1294       RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000038  60c2              STR      r2,[r0,#0xc]
                  |L7.58|
;;;1295     }
;;;1296     
;;;1297     RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_HSITRIM) >> 8);
00003a  684d              LDR      r5,[r1,#4]
;;;1298     
;;;1299     /* Get the MSI configuration -----------------------------------------------*/
;;;1300     if((RCC->CR &RCC_CR_MSION) == RCC_CR_MSION)
;;;1301     {
;;;1302       RCC_OscInitStruct->MSIState = RCC_MSI_ON;
;;;1303     }
;;;1304     else
;;;1305     {
;;;1306       RCC_OscInitStruct->MSIState = RCC_MSI_OFF;
;;;1307     }
;;;1308     
;;;1309     RCC_OscInitStruct->MSICalibrationValue = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSITRIM) >> RCC_ICSCR_MSITRIM_BITNUMBER);
;;;1310     RCC_OscInitStruct->MSIClockRange = (uint32_t)((RCC->ICSCR & RCC_ICSCR_MSIRANGE));
;;;1311     
;;;1312     /* Get the LSE configuration -----------------------------------------------*/
;;;1313     if((RCC->CSR &RCC_CSR_LSEBYP) == RCC_CSR_LSEBYP)
;;;1314     {
;;;1315       RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
;;;1316     }
;;;1317     else if((RCC->CSR &RCC_CSR_LSEON) == RCC_CSR_LSEON)
;;;1318     {
;;;1319       RCC_OscInitStruct->LSEState = RCC_LSE_ON;
;;;1320     }
;;;1321     else
;;;1322     {
;;;1323       RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
;;;1324     }
;;;1325     
;;;1326     /* Get the LSI configuration -----------------------------------------------*/
;;;1327     if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
;;;1328     {
;;;1329       RCC_OscInitStruct->LSIState = RCC_LSI_ON;
;;;1330     }
;;;1331     else
;;;1332     {
;;;1333       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
;;;1334     }
;;;1335     
;;;1336   #if defined(RCC_HSI48_SUPPORT)
;;;1337     /* Get the HSI48 configuration if any-----------------------------------------*/
;;;1338     RCC_OscInitStruct->HSI48State = __HAL_RCC_GET_HSI48_STATE();
;;;1339   #endif /* RCC_HSI48_SUPPORT */
;;;1340   
;;;1341     /* Get the PLL configuration -----------------------------------------------*/
;;;1342     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
;;;1343     {
;;;1344       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
;;;1345     }
;;;1346     else
;;;1347     {
;;;1348       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
;;;1349     }
;;;1350     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
;;;1351     RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
;;;1352     RCC_OscInitStruct->PLL.PLLDIV = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLDIV);
;;;1353   }
00003c  04ed              LSLS     r5,r5,#19
00003e  0eed              LSRS     r5,r5,#27
000040  6105              STR      r5,[r0,#0x10]         ;1300
000042  680d              LDR      r5,[r1,#0]            ;1300
000044  05ed              LSLS     r5,r5,#23             ;1300
000046  d501              BPL      |L7.76|
000048  61c3              STR      r3,[r0,#0x1c]         ;1302
00004a  e000              B        |L7.78|
                  |L7.76|
00004c  61c2              STR      r2,[r0,#0x1c]         ;1306
                  |L7.78|
00004e  684d              LDR      r5,[r1,#4]            ;1309
000050  0e2d              LSRS     r5,r5,#24             ;1309
000052  6205              STR      r5,[r0,#0x20]         ;1310
000054  684d              LDR      r5,[r1,#4]            ;1310
000056  2607              MOVS     r6,#7                 ;1310
000058  0376              LSLS     r6,r6,#13             ;1310
00005a  4035              ANDS     r5,r5,r6              ;1310
00005c  6245              STR      r5,[r0,#0x24]         ;1313
00005e  4d18              LDR      r5,|L7.192|
000060  692e              LDR      r6,[r5,#0x10]         ;1313
000062  0576              LSLS     r6,r6,#21             ;1313
000064  d502              BPL      |L7.108|
000066  2605              MOVS     r6,#5                 ;1315
000068  0236              LSLS     r6,r6,#8              ;1315
00006a  e004              B        |L7.118|
                  |L7.108|
00006c  692e              LDR      r6,[r5,#0x10]         ;1317
00006e  05f6              LSLS     r6,r6,#23             ;1317
000070  d503              BPL      |L7.122|
000072  26ff              MOVS     r6,#0xff              ;1319
000074  3601              ADDS     r6,#1                 ;1319
                  |L7.118|
000076  6086              STR      r6,[r0,#8]            ;1319
000078  e000              B        |L7.124|
                  |L7.122|
00007a  6082              STR      r2,[r0,#8]            ;1323
                  |L7.124|
00007c  692d              LDR      r5,[r5,#0x10]         ;1327
00007e  07ed              LSLS     r5,r5,#31             ;1327
000080  d001              BEQ      |L7.134|
000082  6143              STR      r3,[r0,#0x14]         ;1329
000084  e000              B        |L7.136|
                  |L7.134|
000086  6142              STR      r2,[r0,#0x14]         ;1333
                  |L7.136|
000088  688a              LDR      r2,[r1,#8]            ;1338
00008a  07d2              LSLS     r2,r2,#31             ;1338
00008c  0fd2              LSRS     r2,r2,#31             ;1338
00008e  6182              STR      r2,[r0,#0x18]         ;1342
000090  680a              LDR      r2,[r1,#0]            ;1342
000092  01d2              LSLS     r2,r2,#7              ;1342
000094  d502              BPL      |L7.156|
000096  2202              MOVS     r2,#2                 ;1344
000098  6282              STR      r2,[r0,#0x28]         ;1344
00009a  e000              B        |L7.158|
                  |L7.156|
00009c  6283              STR      r3,[r0,#0x28]         ;1348
                  |L7.158|
00009e  68ca              LDR      r2,[r1,#0xc]          ;1350
0000a0  4022              ANDS     r2,r2,r4              ;1350
0000a2  62c2              STR      r2,[r0,#0x2c]         ;1351
0000a4  68ca              LDR      r2,[r1,#0xc]          ;1351
0000a6  230f              MOVS     r3,#0xf               ;1351
0000a8  049b              LSLS     r3,r3,#18             ;1351
0000aa  401a              ANDS     r2,r2,r3              ;1351
0000ac  6302              STR      r2,[r0,#0x30]         ;1352
0000ae  68c9              LDR      r1,[r1,#0xc]          ;1352
0000b0  2203              MOVS     r2,#3                 ;1352
0000b2  0592              LSLS     r2,r2,#22             ;1352
0000b4  4011              ANDS     r1,r1,r2              ;1352
0000b6  6341              STR      r1,[r0,#0x34]         ;1352
0000b8  bc70              POP      {r4-r6}
0000ba  4770              BX       lr
;;;1354   
                          ENDP

                  |L7.188|
                          DCD      0x40021000
                  |L7.192|
                          DCD      0x40021040

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;1234     */
;;;1235   uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  4804              LDR      r0,|L8.20|
;;;1236   {
;;;1237     /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;1238     return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
000002  4905              LDR      r1,|L8.24|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  68c9              LDR      r1,[r1,#0xc]
000008  4a04              LDR      r2,|L8.28|
00000a  0549              LSLS     r1,r1,#21
00000c  0f49              LSRS     r1,r1,#29
00000e  5c51              LDRB     r1,[r2,r1]
000010  40c8              LSRS     r0,r0,r1
;;;1239   }    
000012  4770              BX       lr
;;;1240   
                          ENDP

                  |L8.20|
                          DCD      SystemCoreClock
                  |L8.24|
                          DCD      0x40021000
                  |L8.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;1246     */
;;;1247   uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  4804              LDR      r0,|L9.20|
;;;1248   {
;;;1249     /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;1250     return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
000002  4905              LDR      r1,|L9.24|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  68c9              LDR      r1,[r1,#0xc]
000008  4a04              LDR      r2,|L9.28|
00000a  0489              LSLS     r1,r1,#18
00000c  0f49              LSRS     r1,r1,#29
00000e  5c51              LDRB     r1,[r2,r1]
000010  40c8              LSRS     r0,r0,r1
;;;1251   } 
000012  4770              BX       lr
;;;1252   
                          ENDP

                  |L9.20|
                          DCD      SystemCoreClock
                  |L9.24|
                          DCD      0x40021000
                  |L9.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;1153     */
;;;1154   uint32_t HAL_RCC_GetSysClockFreq(void)
000000  b510              PUSH     {r4,lr}
;;;1155   {
;;;1156     uint32_t tmpreg = 0, pllm = 0, plld = 0, pllvco = 0, msiclkrange = 0;
;;;1157     uint32_t sysclockfreq = 0;
;;;1158     
;;;1159     tmpreg = RCC->CFGR;
000002  4a1b              LDR      r2,|L10.112|
000004  68d1              LDR      r1,[r2,#0xc]
;;;1160     
;;;1161     /* Get SYSCLK source -------------------------------------------------------*/
;;;1162     switch (tmpreg & RCC_CFGR_SWS)
000006  200c              MOVS     r0,#0xc
000008  4008              ANDS     r0,r0,r1
00000a  2804              CMP      r0,#4
00000c  d00b              BEQ      |L10.38|
00000e  2808              CMP      r0,#8
000010  d010              BEQ      |L10.52|
000012  280c              CMP      r0,#0xc
000014  d010              BEQ      |L10.56|
;;;1163     {
;;;1164       case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
;;;1165       {
;;;1166         if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
;;;1167         {
;;;1168           sysclockfreq =  (HSI_VALUE >> 2);
;;;1169         }
;;;1170         else 
;;;1171         {
;;;1172           sysclockfreq =  HSI_VALUE;
;;;1173         }
;;;1174         break;
;;;1175       }
;;;1176       case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
;;;1177       {
;;;1178         sysclockfreq = HSE_VALUE;
;;;1179         break;
;;;1180       }
;;;1181       case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
;;;1182       {
;;;1183         pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
;;;1184         plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1;
;;;1185         if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
;;;1186         {
;;;1187           /* HSE used as PLL clock source */
;;;1188           pllvco = (HSE_VALUE * pllm) / plld;
;;;1189         }
;;;1190         else
;;;1191         {
;;;1192           if ((RCC->CR & RCC_CR_HSIDIVF) != 0)
;;;1193           {
;;;1194             pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
;;;1195           }
;;;1196           else 
;;;1197           {
;;;1198            pllvco = (HSI_VALUE * pllm) / plld;
;;;1199           }
;;;1200         }
;;;1201         sysclockfreq = pllvco;
;;;1202         break;
;;;1203       }
;;;1204       case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
;;;1205       default: /* MSI used as system clock */
;;;1206       {
;;;1207         msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
000016  6850              LDR      r0,[r2,#4]
000018  0400              LSLS     r0,r0,#16
00001a  0f41              LSRS     r1,r0,#29
;;;1208         sysclockfreq = (32768 * (1 << (msiclkrange + 1)));
00001c  2001              MOVS     r0,#1
00001e  03c0              LSLS     r0,r0,#15
000020  1c49              ADDS     r1,r1,#1
000022  4088              LSLS     r0,r0,r1
;;;1209         break;
;;;1210       }
;;;1211     }
;;;1212     return sysclockfreq;
;;;1213   }
000024  bd10              POP      {r4,pc}
                  |L10.38|
000026  6810              LDR      r0,[r2,#0]            ;1166
000028  06c0              LSLS     r0,r0,#27             ;1166
00002a  d501              BPL      |L10.48|
00002c  4811              LDR      r0,|L10.116|
00002e  bd10              POP      {r4,pc}
                  |L10.48|
000030  4811              LDR      r0,|L10.120|
000032  bd10              POP      {r4,pc}
                  |L10.52|
000034  4811              LDR      r0,|L10.124|
000036  bd10              POP      {r4,pc}
                  |L10.56|
000038  0288              LSLS     r0,r1,#10             ;1183
00003a  4b11              LDR      r3,|L10.128|
00003c  0f00              LSRS     r0,r0,#28             ;1183
00003e  5c18              LDRB     r0,[r3,r0]            ;1183
000040  0209              LSLS     r1,r1,#8              ;1184
000042  68d3              LDR      r3,[r2,#0xc]          ;1185
000044  0f89              LSRS     r1,r1,#30             ;1184
000046  1c49              ADDS     r1,r1,#1              ;1185
000048  03db              LSLS     r3,r3,#15             ;1185
00004a  d504              BPL      |L10.86|
00004c  4a0b              LDR      r2,|L10.124|
00004e  4350              MULS     r0,r2,r0              ;1188
000050  f7fffffe          BL       __aeabi_uidivmod
000054  bd10              POP      {r4,pc}
                  |L10.86|
000056  6812              LDR      r2,[r2,#0]            ;1192
000058  06d2              LSLS     r2,r2,#27             ;1192
00005a  d504              BPL      |L10.102|
00005c  4a05              LDR      r2,|L10.116|
00005e  4350              MULS     r0,r2,r0              ;1194
000060  f7fffffe          BL       __aeabi_uidivmod
000064  bd10              POP      {r4,pc}
                  |L10.102|
000066  4a04              LDR      r2,|L10.120|
000068  4350              MULS     r0,r2,r0              ;1198
00006a  f7fffffe          BL       __aeabi_uidivmod
00006e  bd10              POP      {r4,pc}
;;;1214   
                          ENDP

                  |L10.112|
                          DCD      0x40021000
                  |L10.116|
                          DCD      0x003d0900
                  |L10.120|
                          DCD      0x00f42400
                  |L10.124|
                          DCD      0x007a1200
                  |L10.128|
                          DCD      PLLMulTable

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;1059     */
;;;1060   void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;1061   {
000002  4616              MOV      r6,r2
000004  4602              MOV      r2,r0
000006  b086              SUB      sp,sp,#0x18
;;;1062     GPIO_InitTypeDef gpio = {0};
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  9002              STR      r0,[sp,#8]
;;;1063   
;;;1064     /* Check the parameters */
;;;1065     assert_param(IS_RCC_MCO(RCC_MCOx));
;;;1066     assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;1067     assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;1068     
;;;1069     /* Configure the MCO1 pin in alternate function mode */
;;;1070     gpio.Mode      = GPIO_MODE_AF_PP;
00000e  9004              STR      r0,[sp,#0x10]
000010  2002              MOVS     r0,#2
;;;1071     gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
000012  9001              STR      r0,[sp,#4]
;;;1072     gpio.Pull      = GPIO_NOPULL;
;;;1073     if(RCC_MCOx == RCC_MCO1)
;;;1074     {    
;;;1075       gpio.Pin       = MCO1_PIN;
;;;1076       gpio.Alternate = GPIO_AF0_MCO;
;;;1077       
;;;1078       /* MCO1 Clock Enable */
;;;1079       MCO1_CLK_ENABLE();
;;;1080       HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
000014  9003              STR      r0,[sp,#0xc]
000016  460d              MOV      r5,r1                 ;1061
000018  2005              MOVS     r0,#5
00001a  2101              MOVS     r1,#1                 ;1079
00001c  0700              LSLS     r0,r0,#28
00001e  4c13              LDR      r4,|L11.108|
000020  2a00              CMP      r2,#0                 ;1073
000022  d014              BEQ      |L11.78|
;;;1081     }
;;;1082   #if  defined(STM32L031xx) || defined(STM32L041xx) || defined(STM32L073xx) || defined(STM32L083xx) \
;;;1083     || defined(STM32L072xx) || defined(STM32L082xx) || defined(STM32L071xx) || defined(STM32L081xx) 
;;;1084     else if (RCC_MCOx == RCC_MCO3)
;;;1085     {
;;;1086       gpio.Pin       = MCO3_PIN;
;;;1087       gpio.Alternate = GPIO_AF2_MCO;
;;;1088       
;;;1089       /* MCO3 Clock Enable */
;;;1090       MCO3_CLK_ENABLE();    
;;;1091       HAL_GPIO_Init(MCO3_GPIO_PORT, &gpio);
;;;1092     }
;;;1093   #endif
;;;1094     else
;;;1095     {    
;;;1096       gpio.Pin       = MCO2_PIN;
000024  024a              LSLS     r2,r1,#9
;;;1097       gpio.Alternate = GPIO_AF0_MCO;
;;;1098       
;;;1099       /* MCO2 Clock Enable */
;;;1100       MCO2_CLK_ENABLE();
000026  9200              STR      r2,[sp,#0]
000028  6ae2              LDR      r2,[r4,#0x2c]
00002a  430a              ORRS     r2,r2,r1
00002c  62e2              STR      r2,[r4,#0x2c]
00002e  6ae1              LDR      r1,[r4,#0x2c]
000030  07c9              LSLS     r1,r1,#31
000032  0fc9              LSRS     r1,r1,#31
;;;1101       HAL_GPIO_Init(MCO2_GPIO_PORT, &gpio);
000034  9105              STR      r1,[sp,#0x14]
000036  4669              MOV      r1,sp
000038  f7fffffe          BL       HAL_GPIO_Init
                  |L11.60|
;;;1102     }    
;;;1103     
;;;1104     /* Configure the MCO clock source */
;;;1105     __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
00003c  68e0              LDR      r0,[r4,#0xc]
00003e  217f              MOVS     r1,#0x7f
000040  0609              LSLS     r1,r1,#24
000042  4388              BICS     r0,r0,r1
000044  4335              ORRS     r5,r5,r6
000046  4328              ORRS     r0,r0,r5
000048  60e0              STR      r0,[r4,#0xc]
;;;1106   }
00004a  b006              ADD      sp,sp,#0x18
00004c  bd70              POP      {r4-r6,pc}
                  |L11.78|
00004e  22ff              MOVS     r2,#0xff              ;1075
000050  3201              ADDS     r2,#1                 ;1075
000052  9200              STR      r2,[sp,#0]            ;1079
000054  6ae2              LDR      r2,[r4,#0x2c]         ;1079
000056  430a              ORRS     r2,r2,r1              ;1079
000058  62e2              STR      r2,[r4,#0x2c]         ;1079
00005a  6ae1              LDR      r1,[r4,#0x2c]         ;1079
00005c  07c9              LSLS     r1,r1,#31             ;1079
00005e  0fc9              LSRS     r1,r1,#31             ;1079
000060  9105              STR      r1,[sp,#0x14]         ;1080
000062  4669              MOV      r1,sp                 ;1080
000064  f7fffffe          BL       HAL_GPIO_Init
000068  e7e8              B        |L11.60|
;;;1107   
                          ENDP

00006a  0000              DCW      0x0000
                  |L11.108|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1393     */
;;;1394   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1395   {
;;;1396     /* Check RCC CSSF flag  */
;;;1397     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4c04              LDR      r4,|L12.20|
000004  6960              LDR      r0,[r4,#0x14]
000006  05c0              LSLS     r0,r0,#23
000008  d503              BPL      |L12.18|
;;;1398     {
;;;1399       /* RCC Clock Security System interrupt user callback */
;;;1400       HAL_RCC_CSSCallback();
00000a  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1401       
;;;1402       /* Clear RCC CSS pending bit */
;;;1403       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
00000e  15a0              ASRS     r0,r4,#22
000010  61a0              STR      r0,[r4,#0x18]
                  |L12.18|
;;;1404     }
;;;1405   }
000012  bd10              POP      {r4,pc}
;;;1406   
                          ENDP

                  |L12.20|
                          DCD      0x40021000

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;329      */
;;;330    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;331    {
000002  4604              MOV      r4,r0
;;;332       uint32_t tickstart = 0U;
;;;333      
;;;334      /* Check the parameters */
;;;335      assert_param(RCC_OscInitStruct != NULL);
;;;336      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;337    
;;;338      /*------------------------------- HSE Configuration ------------------------*/ 
;;;339      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
000004  7800              LDRB     r0,[r0,#0]
;;;340      {
;;;341        /* Check the parameters */
;;;342        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;343    
;;;344        /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
;;;345        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
000006  4dfb              LDR      r5,|L13.1012|
000008  07c0              LSLS     r0,r0,#31             ;339
00000a  d050              BEQ      |L13.174|
00000c  68e8              LDR      r0,[r5,#0xc]
00000e  0700              LSLS     r0,r0,#28
000010  0f80              LSRS     r0,r0,#30
000012  2802              CMP      r0,#2
000014  d007              BEQ      |L13.38|
000016  68e8              LDR      r0,[r5,#0xc]
000018  0700              LSLS     r0,r0,#28
00001a  0f80              LSRS     r0,r0,#30
00001c  2803              CMP      r0,#3
00001e  d109              BNE      |L13.52|
000020  68e8              LDR      r0,[r5,#0xc]
000022  03c0              LSLS     r0,r0,#15
000024  d506              BPL      |L13.52|
                  |L13.38|
;;;346           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
;;;347        {
;;;348          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
000026  6828              LDR      r0,[r5,#0]
000028  0380              LSLS     r0,r0,#14
00002a  d540              BPL      |L13.174|
00002c  6860              LDR      r0,[r4,#4]
00002e  2800              CMP      r0,#0
000030  d073              BEQ      |L13.282|
000032  e03c              B        |L13.174|
                  |L13.52|
;;;349          {
;;;350            return HAL_ERROR;
;;;351          }
;;;352        }
;;;353        else
;;;354        {
;;;355          /* Set the new HSE configuration ---------------------------------------*/
;;;356          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
000034  2101              MOVS     r1,#1
000036  6860              LDR      r0,[r4,#4]
000038  0409              LSLS     r1,r1,#16
00003a  4288              CMP      r0,r1
00003c  d103              BNE      |L13.70|
00003e  6828              LDR      r0,[r5,#0]
000040  4308              ORRS     r0,r0,r1
000042  6028              STR      r0,[r5,#0]
000044  e013              B        |L13.110|
                  |L13.70|
000046  2305              MOVS     r3,#5
000048  2201              MOVS     r2,#1
00004a  041b              LSLS     r3,r3,#16
00004c  0492              LSLS     r2,r2,#18
00004e  4298              CMP      r0,r3
000050  6828              LDR      r0,[r5,#0]
000052  d104              BNE      |L13.94|
000054  4310              ORRS     r0,r0,r2
000056  6028              STR      r0,[r5,#0]
000058  6828              LDR      r0,[r5,#0]
00005a  4308              ORRS     r0,r0,r1
00005c  e006              B        |L13.108|
                  |L13.94|
00005e  4388              BICS     r0,r0,r1
000060  6028              STR      r0,[r5,#0]
000062  6828              LDR      r0,[r5,#0]
000064  4008              ANDS     r0,r0,r1
000066  9000              STR      r0,[sp,#0]
000068  6828              LDR      r0,[r5,#0]
00006a  4390              BICS     r0,r0,r2
                  |L13.108|
00006c  6028              STR      r0,[r5,#0]
                  |L13.110|
;;;357          
;;;358    
;;;359           /* Check the HSE State */
;;;360          if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
00006e  6860              LDR      r0,[r4,#4]
000070  2800              CMP      r0,#0
000072  d00e              BEQ      |L13.146|
;;;361          {
;;;362            /* Get Start Tick */
;;;363            tickstart = HAL_GetTick();
000074  f7fffffe          BL       HAL_GetTick
000078  4606              MOV      r6,r0
;;;364            
;;;365            /* Wait till HSE is ready */
;;;366            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
00007a  6828              LDR      r0,[r5,#0]
00007c  0380              LSLS     r0,r0,#14
00007e  d416              BMI      |L13.174|
                  |L13.128|
;;;367            {
;;;368              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
000080  f7fffffe          BL       HAL_GetTick
000084  1b80              SUBS     r0,r0,r6
000086  2864              CMP      r0,#0x64
000088  d87e              BHI      |L13.392|
;;;369              {
;;;370                return HAL_TIMEOUT;
00008a  6828              LDR      r0,[r5,#0]
00008c  0380              LSLS     r0,r0,#14
00008e  d5f7              BPL      |L13.128|
000090  e00d              B        |L13.174|
                  |L13.146|
;;;371              }
;;;372            }
;;;373          }
;;;374          else
;;;375          {
;;;376            /* Get Start Tick */
;;;377            tickstart = HAL_GetTick();
000092  f7fffffe          BL       HAL_GetTick
000096  4606              MOV      r6,r0
;;;378            
;;;379            /* Wait till HSE is disabled */
;;;380            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
000098  6828              LDR      r0,[r5,#0]
00009a  0380              LSLS     r0,r0,#14
00009c  d507              BPL      |L13.174|
                  |L13.158|
;;;381            {
;;;382               if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
00009e  f7fffffe          BL       HAL_GetTick
0000a2  1b80              SUBS     r0,r0,r6
0000a4  2864              CMP      r0,#0x64
0000a6  d86f              BHI      |L13.392|
;;;383              {
;;;384                return HAL_TIMEOUT;
0000a8  6828              LDR      r0,[r5,#0]
0000aa  0380              LSLS     r0,r0,#14
0000ac  d4f7              BMI      |L13.158|
                  |L13.174|
;;;385              }
;;;386            }
;;;387          }
;;;388        }
;;;389      }
;;;390      /*----------------------------- HSI Configuration --------------------------*/ 
;;;391      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
0000ae  7820              LDRB     r0,[r4,#0]
0000b0  0780              LSLS     r0,r0,#30
0000b2  d545              BPL      |L13.320|
;;;392      {
;;;393        /* Check the parameters */
;;;394        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;395        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;396        
;;;397        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
;;;398        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
0000b4  68e8              LDR      r0,[r5,#0xc]
;;;399           || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
;;;400        {
;;;401          /* When HSI is used as system clock it will not disabled */
;;;402          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;403          {
;;;404            return HAL_ERROR;
;;;405          }
;;;406          /* Otherwise, just the calibration is allowed */
;;;407          else
;;;408          {
;;;409            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;410            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
0000b6  271f              MOVS     r7,#0x1f
0000b8  0700              LSLS     r0,r0,#28             ;398
0000ba  0f80              LSRS     r0,r0,#30             ;398
0000bc  023f              LSLS     r7,r7,#8
0000be  2801              CMP      r0,#1                 ;398
0000c0  d007              BEQ      |L13.210|
0000c2  68e8              LDR      r0,[r5,#0xc]          ;398
0000c4  0700              LSLS     r0,r0,#28             ;398
0000c6  0f80              LSRS     r0,r0,#30             ;398
0000c8  2803              CMP      r0,#3                 ;398
0000ca  d109              BNE      |L13.224|
0000cc  68e8              LDR      r0,[r5,#0xc]          ;398
0000ce  03c0              LSLS     r0,r0,#15             ;398
0000d0  d406              BMI      |L13.224|
                  |L13.210|
0000d2  6828              LDR      r0,[r5,#0]            ;402
0000d4  0740              LSLS     r0,r0,#29             ;402
0000d6  d519              BPL      |L13.268|
0000d8  68e0              LDR      r0,[r4,#0xc]          ;402
0000da  2801              CMP      r0,#1                 ;402
0000dc  d11d              BNE      |L13.282|
0000de  e015              B        |L13.268|
                  |L13.224|
;;;411          }
;;;412        }
;;;413        else
;;;414        {
;;;415          /* Check the HSI State */
;;;416          if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
0000e0  68e0              LDR      r0,[r4,#0xc]
0000e2  2800              CMP      r0,#0
0000e4  d01a              BEQ      |L13.284|
;;;417          {
;;;418            /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
;;;419            __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
0000e6  6829              LDR      r1,[r5,#0]
0000e8  2209              MOVS     r2,#9
0000ea  4391              BICS     r1,r1,r2
0000ec  4301              ORRS     r1,r1,r0
0000ee  6029              STR      r1,[r5,#0]
;;;420            
;;;421            /* Get Start Tick */
;;;422            tickstart = HAL_GetTick();
0000f0  f7fffffe          BL       HAL_GetTick
0000f4  4606              MOV      r6,r0
;;;423            
;;;424            /* Wait till HSI is ready */
;;;425            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
0000f6  6828              LDR      r0,[r5,#0]
0000f8  0740              LSLS     r0,r0,#29
0000fa  d407              BMI      |L13.268|
                  |L13.252|
;;;426            {
;;;427              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
0000fc  f7fffffe          BL       HAL_GetTick
000100  1b80              SUBS     r0,r0,r6
000102  2802              CMP      r0,#2
000104  d840              BHI      |L13.392|
;;;428              {
;;;429                return HAL_TIMEOUT;
000106  6828              LDR      r0,[r5,#0]
000108  0740              LSLS     r0,r0,#29
00010a  d5f7              BPL      |L13.252|
                  |L13.268|
;;;430              }
;;;431            }
;;;432                    
;;;433            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;434            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
00010c  6868              LDR      r0,[r5,#4]
00010e  6921              LDR      r1,[r4,#0x10]
000110  43b8              BICS     r0,r0,r7
000112  0209              LSLS     r1,r1,#8
000114  4308              ORRS     r0,r0,r1
000116  6068              STR      r0,[r5,#4]
000118  e012              B        |L13.320|
                  |L13.282|
00011a  e0be              B        |L13.666|
                  |L13.284|
;;;435          }
;;;436          else
;;;437          {
;;;438            /* Disable the Internal High Speed oscillator (HSI). */
;;;439            __HAL_RCC_HSI_DISABLE();
00011c  6828              LDR      r0,[r5,#0]
00011e  0840              LSRS     r0,r0,#1
000120  0040              LSLS     r0,r0,#1
000122  6028              STR      r0,[r5,#0]
;;;440            
;;;441            /* Get Start Tick */
;;;442            tickstart = HAL_GetTick();
000124  f7fffffe          BL       HAL_GetTick
000128  4606              MOV      r6,r0
;;;443            
;;;444            /* Wait till HSI is disabled */
;;;445            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
00012a  6828              LDR      r0,[r5,#0]
00012c  0740              LSLS     r0,r0,#29
00012e  d507              BPL      |L13.320|
                  |L13.304|
;;;446            {
;;;447              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
000130  f7fffffe          BL       HAL_GetTick
000134  1b80              SUBS     r0,r0,r6
000136  2802              CMP      r0,#2
000138  d826              BHI      |L13.392|
;;;448              {
;;;449                return HAL_TIMEOUT;
00013a  6828              LDR      r0,[r5,#0]
00013c  0740              LSLS     r0,r0,#29
00013e  d4f7              BMI      |L13.304|
                  |L13.320|
;;;450              }
;;;451            }
;;;452          }
;;;453        }
;;;454      }
;;;455      /*----------------------------- MSI Configuration --------------------------*/ 
;;;456      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
000140  7820              LDRB     r0,[r4,#0]
000142  06c0              LSLS     r0,r0,#27
000144  d570              BPL      |L13.552|
;;;457      {
;;;458        /* When the MSI is used as system clock it will not be disabled */
;;;459        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
000146  68e8              LDR      r0,[r5,#0xc]
;;;460        {
;;;461          if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
;;;462          {
;;;463            return HAL_ERROR;
;;;464          }
;;;465          /* Otherwise, just the calibration and MSI range change are allowed */
;;;466          else
;;;467          {
;;;468           /* Check MSICalibrationValue and MSIClockRange input parameters */
;;;469            assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
;;;470            assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
;;;471    
;;;472            /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
;;;473               must be correctly programmed according to the frequency of the CPU clock
;;;474               (HCLK) and the supply voltage of the device. */
;;;475            if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
000148  4eab              LDR      r6,|L13.1016|
00014a  0700              LSLS     r0,r0,#28             ;459
00014c  0f80              LSRS     r0,r0,#30             ;459
00014e  d024              BEQ      |L13.410|
;;;476            {
;;;477              /* First increase number of wait states update if necessary */
;;;478              if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
;;;479              {
;;;480                return HAL_ERROR;
;;;481              }
;;;482    
;;;483              /* Selects the Multiple Speed oscillator (MSI) clock range .*/
;;;484              __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
;;;485              /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
;;;486              __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
;;;487            }
;;;488            else
;;;489            {
;;;490              /* Else, keep current flash latency while decreasing applies */
;;;491              /* Selects the Multiple Speed oscillator (MSI) clock range .*/
;;;492              __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
;;;493              /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
;;;494              __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
;;;495    
;;;496              /* Decrease number of wait states update if necessary */
;;;497              if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
;;;498              {
;;;499                return HAL_ERROR;
;;;500              }          
;;;501            }
;;;502    
;;;503            /* Update the SystemCoreClock global variable */
;;;504            SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
;;;505                               >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
;;;506    
;;;507            /* Configure the source of time base considering new system clocks settings*/
;;;508            HAL_InitTick (TICK_INT_PRIORITY);
;;;509          }
;;;510        }
;;;511        else
;;;512        {
;;;513          /* Check MSI State */
;;;514          assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
;;;515    
;;;516          /* Check the MSI State */
;;;517          if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
000150  69e0              LDR      r0,[r4,#0x1c]
000152  2800              CMP      r0,#0
000154  d069              BEQ      |L13.554|
;;;518          {
;;;519            /* Enable the Multi Speed oscillator (MSI). */
;;;520            __HAL_RCC_MSI_ENABLE();
000156  6828              LDR      r0,[r5,#0]
000158  21ff              MOVS     r1,#0xff
00015a  3101              ADDS     r1,#1
00015c  4308              ORRS     r0,r0,r1
00015e  6028              STR      r0,[r5,#0]
;;;521    
;;;522            /* Get Start Tick */
;;;523            tickstart = HAL_GetTick();
000160  f7fffffe          BL       HAL_GetTick
000164  4607              MOV      r7,r0
;;;524    
;;;525            /* Wait till MSI is ready */
;;;526            while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
000166  6828              LDR      r0,[r5,#0]
000168  0580              LSLS     r0,r0,#22
00016a  d407              BMI      |L13.380|
                  |L13.364|
;;;527            {
;;;528              if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
00016c  f7fffffe          BL       HAL_GetTick
000170  1bc0              SUBS     r0,r0,r7
000172  2802              CMP      r0,#2
000174  d808              BHI      |L13.392|
;;;529              {
;;;530                return HAL_TIMEOUT;
000176  6828              LDR      r0,[r5,#0]
000178  0580              LSLS     r0,r0,#22
00017a  d5f7              BPL      |L13.364|
                  |L13.380|
;;;531              }
;;;532            }
;;;533            /* Check MSICalibrationValue and MSIClockRange input parameters */
;;;534            assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
;;;535            assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));
;;;536    
;;;537            /* Selects the Multiple Speed oscillator (MSI) clock range .*/
;;;538            __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
00017c  6868              LDR      r0,[r5,#4]
00017e  6a61              LDR      r1,[r4,#0x24]
000180  43b0              BICS     r0,r0,r6
000182  4308              ORRS     r0,r0,r1
000184  6068              STR      r0,[r5,#4]
;;;539             /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
;;;540            __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
000186  e000              B        |L13.394|
                  |L13.392|
000188  e12a              B        |L13.992|
                  |L13.394|
00018a  6868              LDR      r0,[r5,#4]
00018c  8c21              LDRH     r1,[r4,#0x20]
00018e  0200              LSLS     r0,r0,#8
000190  0a00              LSRS     r0,r0,#8
000192  0609              LSLS     r1,r1,#24
000194  4308              ORRS     r0,r0,r1
000196  6068              STR      r0,[r5,#4]
000198  e0a6              B        |L13.744|
                  |L13.410|
00019a  6828              LDR      r0,[r5,#0]            ;461
00019c  0580              LSLS     r0,r0,#22             ;461
00019e  d502              BPL      |L13.422|
0001a0  69e0              LDR      r0,[r4,#0x1c]         ;461
0001a2  2800              CMP      r0,#0                 ;461
0001a4  d079              BEQ      |L13.666|
                  |L13.422|
0001a6  6a67              LDR      r7,[r4,#0x24]         ;475
0001a8  6869              LDR      r1,[r5,#4]            ;475
0001aa  2007              MOVS     r0,#7                 ;475
0001ac  0340              LSLS     r0,r0,#13             ;475
0001ae  4001              ANDS     r1,r1,r0              ;475
0001b0  2003              MOVS     r0,#3                 ;475
0001b2  02c0              LSLS     r0,r0,#11             ;475
0001b4  428f              CMP      r7,r1                 ;475
0001b6  d939              BLS      |L13.556|
0001b8  68e9              LDR      r1,[r5,#0xc]          ;475
0001ba  2200              MOVS     r2,#0                 ;475
0001bc  0609              LSLS     r1,r1,#24             ;475
0001be  0f09              LSRS     r1,r1,#28             ;475
0001c0  d118              BNE      |L13.500|
0001c2  6ba9              LDR      r1,[r5,#0x38]         ;475
0001c4  00c9              LSLS     r1,r1,#3              ;475
0001c6  d503              BPL      |L13.464|
0001c8  498c              LDR      r1,|L13.1020|
0001ca  6809              LDR      r1,[r1,#0]            ;475
0001cc  4001              ANDS     r1,r1,r0              ;475
0001ce  e00a              B        |L13.486|
                  |L13.464|
0001d0  6ba9              LDR      r1,[r5,#0x38]         ;475
0001d2  2301              MOVS     r3,#1                 ;475
0001d4  071b              LSLS     r3,r3,#28             ;475
0001d6  4319              ORRS     r1,r1,r3              ;475
0001d8  63a9              STR      r1,[r5,#0x38]         ;475
0001da  4988              LDR      r1,|L13.1020|
0001dc  6809              LDR      r1,[r1,#0]            ;475
0001de  6bae              LDR      r6,[r5,#0x38]         ;475
0001e0  4001              ANDS     r1,r1,r0              ;475
0001e2  439e              BICS     r6,r6,r3              ;475
0001e4  63ae              STR      r6,[r5,#0x38]         ;475
                  |L13.486|
0001e6  4281              CMP      r1,r0                 ;475
0001e8  d104              BNE      |L13.500|
0001ea  2003              MOVS     r0,#3                 ;475
0001ec  0380              LSLS     r0,r0,#14             ;475
0001ee  4287              CMP      r7,r0                 ;475
0001f0  d100              BNE      |L13.500|
0001f2  2201              MOVS     r2,#1                 ;475
                  |L13.500|
0001f4  4882              LDR      r0,|L13.1024|
0001f6  6801              LDR      r1,[r0,#0]            ;475
0001f8  0849              LSRS     r1,r1,#1              ;475
0001fa  0049              LSLS     r1,r1,#1              ;475
0001fc  4311              ORRS     r1,r1,r2              ;475
0001fe  6001              STR      r1,[r0,#0]            ;475
000200  6800              LDR      r0,[r0,#0]            ;475
000202  07c0              LSLS     r0,r0,#31             ;475
000204  0fc0              LSRS     r0,r0,#31             ;475
000206  4290              CMP      r0,r2                 ;475
000208  d147              BNE      |L13.666|
00020a  6869              LDR      r1,[r5,#4]            ;484
00020c  2007              MOVS     r0,#7                 ;484
00020e  0340              LSLS     r0,r0,#13             ;484
000210  4381              BICS     r1,r1,r0              ;484
000212  6a60              LDR      r0,[r4,#0x24]         ;484
000214  4301              ORRS     r1,r1,r0              ;484
000216  6069              STR      r1,[r5,#4]            ;484
000218  6868              LDR      r0,[r5,#4]            ;486
00021a  8c21              LDRH     r1,[r4,#0x20]         ;486
00021c  0200              LSLS     r0,r0,#8              ;486
00021e  0a00              LSRS     r0,r0,#8              ;486
000220  0609              LSLS     r1,r1,#24             ;486
000222  4308              ORRS     r0,r0,r1              ;486
000224  6068              STR      r0,[r5,#4]            ;486
000226  e03a              B        |L13.670|
                  |L13.552|
000228  e05e              B        |L13.744|
                  |L13.554|
00022a  e04a              B        |L13.706|
                  |L13.556|
00022c  6869              LDR      r1,[r5,#4]            ;492
00022e  2207              MOVS     r2,#7                 ;492
000230  0352              LSLS     r2,r2,#13             ;492
000232  4391              BICS     r1,r1,r2              ;492
000234  4339              ORRS     r1,r1,r7              ;492
000236  6069              STR      r1,[r5,#4]            ;492
000238  6869              LDR      r1,[r5,#4]            ;494
00023a  8c22              LDRH     r2,[r4,#0x20]         ;494
00023c  0209              LSLS     r1,r1,#8              ;494
00023e  0a09              LSRS     r1,r1,#8              ;494
000240  0612              LSLS     r2,r2,#24             ;494
000242  4311              ORRS     r1,r1,r2              ;494
000244  6069              STR      r1,[r5,#4]            ;494
000246  6a67              LDR      r7,[r4,#0x24]         ;494
000248  68e9              LDR      r1,[r5,#0xc]          ;494
00024a  2200              MOVS     r2,#0                 ;494
00024c  0609              LSLS     r1,r1,#24             ;494
00024e  0f09              LSRS     r1,r1,#28             ;494
000250  d118              BNE      |L13.644|
000252  6ba9              LDR      r1,[r5,#0x38]         ;494
000254  00c9              LSLS     r1,r1,#3              ;494
000256  d503              BPL      |L13.608|
000258  4968              LDR      r1,|L13.1020|
00025a  6809              LDR      r1,[r1,#0]            ;494
00025c  4001              ANDS     r1,r1,r0              ;494
00025e  e00a              B        |L13.630|
                  |L13.608|
000260  6ba9              LDR      r1,[r5,#0x38]         ;494
000262  2301              MOVS     r3,#1                 ;494
000264  071b              LSLS     r3,r3,#28             ;494
000266  4319              ORRS     r1,r1,r3              ;494
000268  63a9              STR      r1,[r5,#0x38]         ;494
00026a  4964              LDR      r1,|L13.1020|
00026c  6809              LDR      r1,[r1,#0]            ;494
00026e  6bae              LDR      r6,[r5,#0x38]         ;494
000270  4001              ANDS     r1,r1,r0              ;494
000272  439e              BICS     r6,r6,r3              ;494
000274  63ae              STR      r6,[r5,#0x38]         ;494
                  |L13.630|
000276  4281              CMP      r1,r0                 ;494
000278  d104              BNE      |L13.644|
00027a  2003              MOVS     r0,#3                 ;494
00027c  0380              LSLS     r0,r0,#14             ;494
00027e  4287              CMP      r7,r0                 ;494
000280  d100              BNE      |L13.644|
000282  2201              MOVS     r2,#1                 ;494
                  |L13.644|
000284  485e              LDR      r0,|L13.1024|
000286  6801              LDR      r1,[r0,#0]            ;494
000288  0849              LSRS     r1,r1,#1              ;494
00028a  0049              LSLS     r1,r1,#1              ;494
00028c  4311              ORRS     r1,r1,r2              ;494
00028e  6001              STR      r1,[r0,#0]            ;494
000290  6800              LDR      r0,[r0,#0]            ;494
000292  07c0              LSLS     r0,r0,#31             ;494
000294  0fc0              LSRS     r0,r0,#31             ;494
000296  4290              CMP      r0,r2                 ;494
000298  d001              BEQ      |L13.670|
                  |L13.666|
00029a  2001              MOVS     r0,#1                 ;499
;;;541    
;;;542          }
;;;543          else
;;;544          {
;;;545            /* Disable the Multi Speed oscillator (MSI). */
;;;546            __HAL_RCC_MSI_DISABLE();
;;;547    
;;;548            /* Get Start Tick */
;;;549            tickstart = HAL_GetTick();
;;;550    
;;;551            /* Wait till MSI is ready */
;;;552            while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
;;;553            {
;;;554              if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
;;;555              {
;;;556                return HAL_TIMEOUT;
;;;557              }
;;;558            }
;;;559          }
;;;560        }
;;;561      }  
;;;562      /*------------------------------ LSI Configuration -------------------------*/ 
;;;563      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;564      {
;;;565        /* Check the parameters */
;;;566        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;567        
;;;568        /* Check the LSI State */
;;;569        if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
;;;570        {
;;;571          /* Enable the Internal Low Speed oscillator (LSI). */
;;;572          __HAL_RCC_LSI_ENABLE();
;;;573          
;;;574          /* Get Start Tick */
;;;575          tickstart = HAL_GetTick();
;;;576          
;;;577          /* Wait till LSI is ready */  
;;;578          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;579          {
;;;580            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;581            {
;;;582              return HAL_TIMEOUT;
;;;583            }
;;;584          }
;;;585        }
;;;586        else
;;;587        {
;;;588          /* Disable the Internal Low Speed oscillator (LSI). */
;;;589          __HAL_RCC_LSI_DISABLE();
;;;590          
;;;591          /* Get Start Tick */
;;;592          tickstart = HAL_GetTick();
;;;593          
;;;594          /* Wait till LSI is disabled */  
;;;595          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;596          {
;;;597            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;598            {
;;;599              return HAL_TIMEOUT;
;;;600            }
;;;601          }
;;;602        }
;;;603      }
;;;604      /*------------------------------ LSE Configuration -------------------------*/ 
;;;605      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;606      {
;;;607        FlagStatus       pwrclkchanged = RESET;
;;;608        
;;;609        /* Check the parameters */
;;;610        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;611    
;;;612        /* Update LSE configuration in Backup Domain control register    */
;;;613        /* Requires to enable write access to Backup Domain of necessary */
;;;614        if(__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;615        {
;;;616          __HAL_RCC_PWR_CLK_ENABLE();
;;;617          pwrclkchanged = SET;
;;;618        }
;;;619        
;;;620        if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;621        {
;;;622          /* Enable write access to Backup domain */
;;;623          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;624          
;;;625          /* Wait for Backup domain Write protection disable */
;;;626          tickstart = HAL_GetTick();
;;;627    
;;;628          while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;629          {
;;;630            if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;631            {
;;;632              return HAL_TIMEOUT;
;;;633            }
;;;634          }
;;;635        }
;;;636    
;;;637        /* Set the new LSE configuration -----------------------------------------*/
;;;638        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;639        /* Check the LSE State */
;;;640        if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
;;;641        {
;;;642          /* Get Start Tick */
;;;643          tickstart = HAL_GetTick();
;;;644          
;;;645          /* Wait till LSE is ready */  
;;;646          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;647          {
;;;648            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;649            {
;;;650              return HAL_TIMEOUT;
;;;651            }
;;;652          }
;;;653        }
;;;654        else
;;;655        {
;;;656          /* Get Start Tick */
;;;657          tickstart = HAL_GetTick();
;;;658          
;;;659          /* Wait till LSE is disabled */  
;;;660          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;661          {
;;;662            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;663            {
;;;664              return HAL_TIMEOUT;
;;;665            }
;;;666          }
;;;667        }
;;;668    
;;;669        /* Require to disable power clock if necessary */
;;;670        if(pwrclkchanged == SET)
;;;671        {
;;;672          __HAL_RCC_PWR_CLK_DISABLE();
;;;673        }
;;;674      }
;;;675    
;;;676    #if defined(RCC_HSI48_SUPPORT)
;;;677      /*----------------------------- HSI48 Configuration --------------------------*/
;;;678      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
;;;679      {
;;;680        /* Check the parameters */
;;;681        assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
;;;682    
;;;683          /* Check the HSI48 State */
;;;684          if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
;;;685          {
;;;686            /* Enable the Internal High Speed oscillator (HSI48). */
;;;687            __HAL_RCC_HSI48_ENABLE();
;;;688    
;;;689            /* Get Start Tick */
;;;690            tickstart = HAL_GetTick();
;;;691          
;;;692            /* Wait till HSI48 is ready */  
;;;693            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
;;;694            {
;;;695              if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
;;;696              {
;;;697                return HAL_TIMEOUT;
;;;698              }
;;;699            } 
;;;700          }
;;;701          else
;;;702          {
;;;703            /* Disable the Internal High Speed oscillator (HSI48). */
;;;704            __HAL_RCC_HSI48_DISABLE();
;;;705    
;;;706            /* Get Start Tick */
;;;707            tickstart = HAL_GetTick();
;;;708          
;;;709            /* Wait till HSI48 is ready */  
;;;710            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
;;;711            {
;;;712              if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
;;;713              {
;;;714                return HAL_TIMEOUT;
;;;715              }
;;;716            }
;;;717          }
;;;718      }
;;;719    #endif /* RCC_HSI48_SUPPORT */
;;;720           
;;;721      /*-------------------------------- PLL Configuration -----------------------*/
;;;722      /* Check the parameters */
;;;723      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;724      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;725      {
;;;726        /* Check if the PLL is used as system clock or not */
;;;727        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
;;;728        { 
;;;729          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;730          {
;;;731            /* Check the parameters */
;;;732            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;733            assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
;;;734            assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));
;;;735      
;;;736            /* Disable the main PLL. */
;;;737            __HAL_RCC_PLL_DISABLE();
;;;738            
;;;739            /* Get Start Tick */
;;;740            tickstart = HAL_GetTick();
;;;741            
;;;742            /* Wait till PLL is disabled */
;;;743            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;744            {
;;;745              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;746              {
;;;747                return HAL_TIMEOUT;
;;;748              }
;;;749            }
;;;750    
;;;751            /* Configure the main PLL clock source, multiplication and division factors. */
;;;752            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
;;;753                                 RCC_OscInitStruct->PLL.PLLMUL,
;;;754                                 RCC_OscInitStruct->PLL.PLLDIV);
;;;755            /* Enable the main PLL. */
;;;756            __HAL_RCC_PLL_ENABLE();
;;;757            
;;;758            /* Get Start Tick */
;;;759            tickstart = HAL_GetTick();
;;;760            
;;;761            /* Wait till PLL is ready */
;;;762            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
;;;763            {
;;;764              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;765              {
;;;766                return HAL_TIMEOUT;
;;;767              }
;;;768            }
;;;769          }
;;;770          else
;;;771          {
;;;772            /* Disable the main PLL. */
;;;773            __HAL_RCC_PLL_DISABLE();
;;;774     
;;;775            /* Get Start Tick */
;;;776            tickstart = HAL_GetTick();
;;;777            
;;;778            /* Wait till PLL is disabled */  
;;;779            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
;;;780            {
;;;781              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;782              {
;;;783                return HAL_TIMEOUT;
;;;784              }
;;;785            }
;;;786          }
;;;787        }
;;;788        else
;;;789        {
;;;790          return HAL_ERROR;
;;;791        }
;;;792      }
;;;793      
;;;794      return HAL_OK;
;;;795    }
00029c  bdf8              POP      {r3-r7,pc}
                  |L13.670|
00029e  6a60              LDR      r0,[r4,#0x24]         ;504
0002a0  0b41              LSRS     r1,r0,#13             ;504
0002a2  2001              MOVS     r0,#1                 ;504
0002a4  03c0              LSLS     r0,r0,#15             ;504
0002a6  1c49              ADDS     r1,r1,#1              ;504
0002a8  4088              LSLS     r0,r0,r1              ;504
0002aa  68e9              LDR      r1,[r5,#0xc]          ;504
0002ac  4a55              LDR      r2,|L13.1028|
0002ae  0609              LSLS     r1,r1,#24             ;504
0002b0  0f09              LSRS     r1,r1,#28             ;504
0002b2  5c51              LDRB     r1,[r2,r1]            ;504
0002b4  40c8              LSRS     r0,r0,r1              ;504
0002b6  4954              LDR      r1,|L13.1032|
0002b8  6008              STR      r0,[r1,#0]            ;508  ; SystemCoreClock
0002ba  2000              MOVS     r0,#0                 ;508
0002bc  f7fffffe          BL       HAL_InitTick
0002c0  e012              B        |L13.744|
                  |L13.706|
0002c2  6829              LDR      r1,[r5,#0]            ;546
0002c4  20ff              MOVS     r0,#0xff              ;546
0002c6  3001              ADDS     r0,#1                 ;546
0002c8  4381              BICS     r1,r1,r0              ;546
0002ca  6029              STR      r1,[r5,#0]            ;546
0002cc  f7fffffe          BL       HAL_GetTick
0002d0  4606              MOV      r6,r0                 ;549
0002d2  6828              LDR      r0,[r5,#0]            ;552
0002d4  0580              LSLS     r0,r0,#22             ;552
0002d6  d507              BPL      |L13.744|
                  |L13.728|
0002d8  f7fffffe          BL       HAL_GetTick
0002dc  1b80              SUBS     r0,r0,r6              ;554
0002de  2802              CMP      r0,#2                 ;554
0002e0  d87e              BHI      |L13.992|
0002e2  6828              LDR      r0,[r5,#0]            ;556
0002e4  0580              LSLS     r0,r0,#22             ;556
0002e6  d4f7              BMI      |L13.728|
                  |L13.744|
0002e8  7820              LDRB     r0,[r4,#0]            ;563
0002ea  4e48              LDR      r6,|L13.1036|
0002ec  0700              LSLS     r0,r0,#28             ;563
0002ee  d526              BPL      |L13.830|
0002f0  6960              LDR      r0,[r4,#0x14]         ;569
0002f2  2800              CMP      r0,#0                 ;569
0002f4  6930              LDR      r0,[r6,#0x10]         ;589
0002f6  d011              BEQ      |L13.796|
0002f8  2101              MOVS     r1,#1                 ;572
0002fa  4308              ORRS     r0,r0,r1              ;572
0002fc  6130              STR      r0,[r6,#0x10]         ;572
0002fe  f7fffffe          BL       HAL_GetTick
000302  4607              MOV      r7,r0                 ;575
000304  6930              LDR      r0,[r6,#0x10]         ;578
000306  0780              LSLS     r0,r0,#30             ;578
000308  d419              BMI      |L13.830|
                  |L13.778|
00030a  f7fffffe          BL       HAL_GetTick
00030e  1bc0              SUBS     r0,r0,r7              ;580
000310  2802              CMP      r0,#2                 ;580
000312  d865              BHI      |L13.992|
000314  6930              LDR      r0,[r6,#0x10]         ;582
000316  0780              LSLS     r0,r0,#30             ;582
000318  d5f7              BPL      |L13.778|
00031a  e010              B        |L13.830|
                  |L13.796|
00031c  0840              LSRS     r0,r0,#1              ;589
00031e  0040              LSLS     r0,r0,#1              ;589
000320  6130              STR      r0,[r6,#0x10]         ;589
000322  f7fffffe          BL       HAL_GetTick
000326  4607              MOV      r7,r0                 ;592
000328  6930              LDR      r0,[r6,#0x10]         ;595
00032a  0780              LSLS     r0,r0,#30             ;595
00032c  d507              BPL      |L13.830|
                  |L13.814|
00032e  f7fffffe          BL       HAL_GetTick
000332  1bc0              SUBS     r0,r0,r7              ;597
000334  2802              CMP      r0,#2                 ;597
000336  d853              BHI      |L13.992|
000338  6930              LDR      r0,[r6,#0x10]         ;599
00033a  0780              LSLS     r0,r0,#30             ;599
00033c  d4f7              BMI      |L13.814|
                  |L13.830|
00033e  7820              LDRB     r0,[r4,#0]            ;605
000340  0740              LSLS     r0,r0,#29             ;605
000342  d57f              BPL      |L13.1092|
000344  2000              MOVS     r0,#0                 ;607
000346  9000              STR      r0,[sp,#0]            ;614
000348  6ba8              LDR      r0,[r5,#0x38]         ;614
00034a  00c0              LSLS     r0,r0,#3              ;614
00034c  d406              BMI      |L13.860|
00034e  6ba8              LDR      r0,[r5,#0x38]         ;616
000350  2101              MOVS     r1,#1                 ;616
000352  0709              LSLS     r1,r1,#28             ;616
000354  4308              ORRS     r0,r0,r1              ;616
000356  63a8              STR      r0,[r5,#0x38]         ;616
000358  2001              MOVS     r0,#1                 ;617
00035a  9000              STR      r0,[sp,#0]            ;617
                  |L13.860|
00035c  4827              LDR      r0,|L13.1020|
00035e  6801              LDR      r1,[r0,#0]            ;620
000360  05c9              LSLS     r1,r1,#23             ;620
000362  d415              BMI      |L13.912|
000364  6800              LDR      r0,[r0,#0]            ;623
000366  21ff              MOVS     r1,#0xff              ;623
000368  3101              ADDS     r1,#1                 ;623
00036a  4308              ORRS     r0,r0,r1              ;623
00036c  4923              LDR      r1,|L13.1020|
00036e  6008              STR      r0,[r1,#0]            ;623
000370  f7fffffe          BL       HAL_GetTick
000374  4607              MOV      r7,r0                 ;626
000376  4821              LDR      r0,|L13.1020|
000378  6800              LDR      r0,[r0,#0]            ;628
00037a  05c0              LSLS     r0,r0,#23             ;628
00037c  d408              BMI      |L13.912|
                  |L13.894|
00037e  f7fffffe          BL       HAL_GetTick
000382  1bc0              SUBS     r0,r0,r7              ;630
000384  2864              CMP      r0,#0x64              ;630
000386  d82b              BHI      |L13.992|
000388  481c              LDR      r0,|L13.1020|
00038a  6800              LDR      r0,[r0,#0]            ;632
00038c  05c0              LSLS     r0,r0,#23             ;632
00038e  d5f6              BPL      |L13.894|
                  |L13.912|
000390  21ff              MOVS     r1,#0xff              ;638
000392  68a2              LDR      r2,[r4,#8]            ;638
000394  3101              ADDS     r1,#1                 ;638
000396  428a              CMP      r2,r1                 ;638
000398  d103              BNE      |L13.930|
                  |L13.922|
00039a  6930              LDR      r0,[r6,#0x10]         ;638
00039c  4308              ORRS     r0,r0,r1              ;638
00039e  6130              STR      r0,[r6,#0x10]         ;638
0003a0  e011              B        |L13.966|
                  |L13.930|
0003a2  2001              MOVS     r0,#1                 ;638
0003a4  0280              LSLS     r0,r0,#10             ;638
0003a6  2a00              CMP      r2,#0                 ;638
0003a8  d007              BEQ      |L13.954|
0003aa  2305              MOVS     r3,#5                 ;638
0003ac  021b              LSLS     r3,r3,#8              ;638
0003ae  429a              CMP      r2,r3                 ;638
0003b0  d103              BNE      |L13.954|
0003b2  6932              LDR      r2,[r6,#0x10]         ;638
0003b4  4302              ORRS     r2,r2,r0              ;638
0003b6  6132              STR      r2,[r6,#0x10]         ;638
0003b8  e7ef              B        |L13.922|
                  |L13.954|
0003ba  6932              LDR      r2,[r6,#0x10]         ;638
0003bc  438a              BICS     r2,r2,r1              ;638
0003be  6132              STR      r2,[r6,#0x10]         ;638
0003c0  6931              LDR      r1,[r6,#0x10]         ;638
0003c2  4381              BICS     r1,r1,r0              ;638
0003c4  6131              STR      r1,[r6,#0x10]         ;638
                  |L13.966|
0003c6  68a0              LDR      r0,[r4,#8]            ;640
0003c8  2800              CMP      r0,#0                 ;640
0003ca  d023              BEQ      |L13.1044|
0003cc  f7fffffe          BL       HAL_GetTick
0003d0  4607              MOV      r7,r0                 ;643
0003d2  6930              LDR      r0,[r6,#0x10]         ;646
0003d4  0580              LSLS     r0,r0,#22             ;646
0003d6  d42d              BMI      |L13.1076|
0003d8  4e0d              LDR      r6,|L13.1040|
                  |L13.986|
0003da  f7fffffe          BL       HAL_GetTick
0003de  e000              B        |L13.994|
                  |L13.992|
0003e0  e080              B        |L13.1252|
                  |L13.994|
0003e2  1bc0              SUBS     r0,r0,r7              ;648
0003e4  42b0              CMP      r0,r6                 ;648
0003e6  d87d              BHI      |L13.1252|
0003e8  4808              LDR      r0,|L13.1036|
0003ea  6900              LDR      r0,[r0,#0x10]         ;650
0003ec  0580              LSLS     r0,r0,#22             ;650
0003ee  d5f4              BPL      |L13.986|
0003f0  e020              B        |L13.1076|
0003f2  e027              B        |L13.1092|
                  |L13.1012|
                          DCD      0x40021000
                  |L13.1016|
                          DCD      0x0000e000
                  |L13.1020|
                          DCD      0x40007000
                  |L13.1024|
                          DCD      0x40022000
                  |L13.1028|
                          DCD      AHBPrescTable
                  |L13.1032|
                          DCD      SystemCoreClock
                  |L13.1036|
                          DCD      0x40021040
                  |L13.1040|
                          DCD      0x00001388
                  |L13.1044|
000414  f7fffffe          BL       HAL_GetTick
000418  6931              LDR      r1,[r6,#0x10]         ;660
00041a  4607              MOV      r7,r0                 ;657
00041c  0589              LSLS     r1,r1,#22             ;660
00041e  d509              BPL      |L13.1076|
000420  4e4c              LDR      r6,|L13.1364|
                  |L13.1058|
000422  f7fffffe          BL       HAL_GetTick
000426  1bc0              SUBS     r0,r0,r7              ;662
000428  42b0              CMP      r0,r6                 ;662
00042a  d85e              BHI      |L13.1258|
00042c  484a              LDR      r0,|L13.1368|
00042e  6900              LDR      r0,[r0,#0x10]         ;664
000430  0580              LSLS     r0,r0,#22             ;664
000432  d4f6              BMI      |L13.1058|
                  |L13.1076|
000434  9800              LDR      r0,[sp,#0]            ;670
000436  2800              CMP      r0,#0                 ;670
000438  d004              BEQ      |L13.1092|
00043a  6ba8              LDR      r0,[r5,#0x38]         ;672
00043c  2101              MOVS     r1,#1                 ;672
00043e  0709              LSLS     r1,r1,#28             ;672
000440  4388              BICS     r0,r0,r1              ;672
000442  63a8              STR      r0,[r5,#0x38]         ;672
                  |L13.1092|
000444  7820              LDRB     r0,[r4,#0]            ;678
000446  0680              LSLS     r0,r0,#26             ;678
000448  d532              BPL      |L13.1200|
00044a  4844              LDR      r0,|L13.1372|
00044c  69a2              LDR      r2,[r4,#0x18]         ;684
00044e  1441              ASRS     r1,r0,#17             ;687
000450  2a00              CMP      r2,#0                 ;684
000452  d018              BEQ      |L13.1158|
000454  68ab              LDR      r3,[r5,#8]            ;687
000456  2201              MOVS     r2,#1                 ;687
000458  4313              ORRS     r3,r3,r2              ;687
00045a  60ab              STR      r3,[r5,#8]            ;687
00045c  6b6b              LDR      r3,[r5,#0x34]         ;687
00045e  4313              ORRS     r3,r3,r2              ;687
000460  636b              STR      r3,[r5,#0x34]         ;687
000462  6a02              LDR      r2,[r0,#0x20]         ;687
000464  430a              ORRS     r2,r2,r1              ;687
000466  6202              STR      r2,[r0,#0x20]         ;687
000468  f7fffffe          BL       HAL_GetTick
00046c  4606              MOV      r6,r0                 ;690
00046e  68a8              LDR      r0,[r5,#8]            ;693
000470  0780              LSLS     r0,r0,#30             ;693
000472  d41d              BMI      |L13.1200|
                  |L13.1140|
000474  f7fffffe          BL       HAL_GetTick
000478  1b80              SUBS     r0,r0,r6              ;695
00047a  2802              CMP      r0,#2                 ;695
00047c  d835              BHI      |L13.1258|
00047e  68a8              LDR      r0,[r5,#8]            ;697
000480  0780              LSLS     r0,r0,#30             ;697
000482  d5f7              BPL      |L13.1140|
000484  e014              B        |L13.1200|
                  |L13.1158|
000486  68aa              LDR      r2,[r5,#8]            ;704
000488  0852              LSRS     r2,r2,#1              ;704
00048a  0052              LSLS     r2,r2,#1              ;704
00048c  60aa              STR      r2,[r5,#8]            ;704
00048e  6a02              LDR      r2,[r0,#0x20]         ;704
000490  438a              BICS     r2,r2,r1              ;704
000492  6202              STR      r2,[r0,#0x20]         ;704
000494  f7fffffe          BL       HAL_GetTick
000498  4606              MOV      r6,r0                 ;707
00049a  68a8              LDR      r0,[r5,#8]            ;710
00049c  0780              LSLS     r0,r0,#30             ;710
00049e  d507              BPL      |L13.1200|
                  |L13.1184|
0004a0  f7fffffe          BL       HAL_GetTick
0004a4  1b80              SUBS     r0,r0,r6              ;712
0004a6  2802              CMP      r0,#2                 ;712
0004a8  d81f              BHI      |L13.1258|
0004aa  68a8              LDR      r0,[r5,#8]            ;714
0004ac  0780              LSLS     r0,r0,#30             ;714
0004ae  d4f7              BMI      |L13.1184|
                  |L13.1200|
0004b0  6aa0              LDR      r0,[r4,#0x28]         ;724
0004b2  2800              CMP      r0,#0                 ;724
0004b4  d04b              BEQ      |L13.1358|
0004b6  68e9              LDR      r1,[r5,#0xc]          ;727
0004b8  0709              LSLS     r1,r1,#28             ;727
0004ba  0f89              LSRS     r1,r1,#30             ;727
0004bc  2903              CMP      r1,#3                 ;727
0004be  d100              BNE      |L13.1218|
0004c0  e6eb              B        |L13.666|
                  |L13.1218|
0004c2  2701              MOVS     r7,#1                 ;737
0004c4  063f              LSLS     r7,r7,#24             ;737
0004c6  2802              CMP      r0,#2                 ;729
0004c8  6828              LDR      r0,[r5,#0]            ;773
0004ca  d010              BEQ      |L13.1262|
0004cc  43b8              BICS     r0,r0,r7              ;773
0004ce  6028              STR      r0,[r5,#0]            ;773
0004d0  f7fffffe          BL       HAL_GetTick
0004d4  4604              MOV      r4,r0                 ;776
0004d6  6828              LDR      r0,[r5,#0]            ;779
0004d8  0180              LSLS     r0,r0,#6              ;779
0004da  d538              BPL      |L13.1358|
                  |L13.1244|
0004dc  f7fffffe          BL       HAL_GetTick
0004e0  1b00              SUBS     r0,r0,r4              ;781
0004e2  e000              B        |L13.1254|
                  |L13.1252|
0004e4  e001              B        |L13.1258|
                  |L13.1254|
0004e6  2802              CMP      r0,#2                 ;781
0004e8  d92e              BLS      |L13.1352|
                  |L13.1258|
0004ea  2003              MOVS     r0,#3                 ;783
0004ec  bdf8              POP      {r3-r7,pc}
                  |L13.1262|
0004ee  43b8              BICS     r0,r0,r7              ;737
0004f0  6028              STR      r0,[r5,#0]            ;737
0004f2  f7fffffe          BL       HAL_GetTick
0004f6  4606              MOV      r6,r0                 ;740
0004f8  6828              LDR      r0,[r5,#0]            ;743
0004fa  0180              LSLS     r0,r0,#6              ;743
0004fc  d507              BPL      |L13.1294|
                  |L13.1278|
0004fe  f7fffffe          BL       HAL_GetTick
000502  1b80              SUBS     r0,r0,r6              ;745
000504  2802              CMP      r0,#2                 ;745
000506  d8f0              BHI      |L13.1258|
000508  6828              LDR      r0,[r5,#0]            ;747
00050a  0180              LSLS     r0,r0,#6              ;747
00050c  d4f7              BMI      |L13.1278|
                  |L13.1294|
00050e  6ae1              LDR      r1,[r4,#0x2c]         ;752
000510  6b20              LDR      r0,[r4,#0x30]         ;752
000512  68ea              LDR      r2,[r5,#0xc]          ;752
000514  4301              ORRS     r1,r1,r0              ;752
000516  6b60              LDR      r0,[r4,#0x34]         ;752
000518  23fd              MOVS     r3,#0xfd              ;752
00051a  041b              LSLS     r3,r3,#16             ;752
00051c  439a              BICS     r2,r2,r3              ;752
00051e  4310              ORRS     r0,r0,r2              ;752
000520  4301              ORRS     r1,r1,r0              ;752
000522  60e9              STR      r1,[r5,#0xc]          ;752
000524  6828              LDR      r0,[r5,#0]            ;756
000526  4338              ORRS     r0,r0,r7              ;756
000528  6028              STR      r0,[r5,#0]            ;756
00052a  f7fffffe          BL       HAL_GetTick
00052e  4604              MOV      r4,r0                 ;759
000530  6828              LDR      r0,[r5,#0]            ;762
000532  0180              LSLS     r0,r0,#6              ;762
000534  d40b              BMI      |L13.1358|
                  |L13.1334|
000536  f7fffffe          BL       HAL_GetTick
00053a  1b00              SUBS     r0,r0,r4              ;764
00053c  2802              CMP      r0,#2                 ;764
00053e  d8d4              BHI      |L13.1258|
000540  6828              LDR      r0,[r5,#0]            ;766
000542  0180              LSLS     r0,r0,#6              ;766
000544  d5f7              BPL      |L13.1334|
000546  e002              B        |L13.1358|
                  |L13.1352|
000548  6828              LDR      r0,[r5,#0]            ;783
00054a  0180              LSLS     r0,r0,#6              ;783
00054c  d4c6              BMI      |L13.1244|
                  |L13.1358|
00054e  2000              MOVS     r0,#0                 ;794
000550  bdf8              POP      {r3-r7,pc}
;;;796    
                          ENDP

000552  0000              DCW      0x0000
                  |L13.1364|
                          DCD      0x00001388
                  |L13.1368|
                          DCD      0x40021040
                  |L13.1372|
                          DCD      0x40010000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_L0_V1.10.0\\Drivers\\STM32L0xx_HAL_Driver\\Src\\stm32l0xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32l0xx_hal_rcc_c_b7071a4b____REV16|
#line 388 "..\\..\\..\\M0P0_Library\\STM32Cube_FW_L0_V1.10.0\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32l0xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32l0xx_hal_rcc_c_b7071a4b____REVSH|
#line 402
|__asm___19_stm32l0xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
